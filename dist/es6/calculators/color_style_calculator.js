import { forEach } from '../util';
var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
canvas.width = canvas.height = 1;
var context = canvas.getContext('2d');
export class ColorStyleCalculator {
    constructor() {
    }
    setKeyframeRange(startValue, endValue) {
        this._startValue = parseColorString(startValue);
        this._endValue = parseColorString(endValue);
        this._rangeDiff = [];
        this._rangeDiff[0] = this._endValue[0] - this._startValue[0];
        this._rangeDiff[1] = this._endValue[1] - this._startValue[1];
        this._rangeDiff[2] = this._endValue[2] - this._startValue[2];
        this._rangeDiff[3] = this._endValue[3] - this._startValue[3];
    }
    calculate(percentage) {
        var values = [];
        var alphaVal = this._rangeDiff[3] * percentage + this._startValue[3];
        forEach(this._rangeDiff, (value, index) => {
            var currentValue = value * percentage + this._startValue[index];
            if (index < 3) {
                if (alphaVal !== 1 && currentValue > 0) {
                    currentValue /= alphaVal;
                }
                currentValue = Math.round(currentValue);
            }
            values.push(currentValue);
        });
        let valueString = values.join(', ');
        return `rgba(${valueString})`;
    }
}
function parseColorString(colorString) {
    // Source: https://github.com/web-animations/web-animations-js/blob/b5d91413acee82aadd01a18880cb84a5d883047d/src/color-handler.js
    colorString = colorString.trim();
    // The context ignores invalid colors
    context.fillStyle = '#000';
    context.fillStyle = colorString;
    var contextSerializedFillStyle = context.fillStyle;
    context.fillStyle = '#fff';
    context.fillStyle = colorString;
    if (contextSerializedFillStyle != context.fillStyle)
        return;
    context.fillRect(0, 0, 1, 1);
    var pixelColor = context.getImageData(0, 0, 1, 1).data;
    context.clearRect(0, 0, 1, 1);
    var alpha = pixelColor[3] / 255;
    return [pixelColor[0] * alpha, pixelColor[1] * alpha, pixelColor[2] * alpha, alpha];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3Jfc3R5bGVfY2FsY3VsYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhbGN1bGF0b3JzL2NvbG9yX3N0eWxlX2NhbGN1bGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQ08sRUFBUSxPQUFPLEVBQUMsTUFBTSxTQUFTO0FBRXRDLElBQUksTUFBTSxHQUFzQixRQUFRLENBQUMsZUFBZSxDQUFDLDhCQUE4QixFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ25HLE1BQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDakMsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV0QztJQUtFO0lBQWUsQ0FBQztJQUVoQixnQkFBZ0IsQ0FBQyxVQUFrQixFQUFFLFFBQWdCO1FBQ25ELElBQUksQ0FBQyxXQUFXLEdBQUcsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsU0FBUyxDQUFDLFVBQWtCO1FBQzFCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXJFLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUs7WUFDcEMsSUFBSSxZQUFZLEdBQUcsS0FBSyxHQUFHLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNkLEVBQUUsQ0FBQSxDQUFDLFFBQVEsS0FBSyxDQUFDLElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3RDLFlBQVksSUFBSSxRQUFRLENBQUM7Z0JBQzNCLENBQUM7Z0JBQ0QsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDMUMsQ0FBQztZQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUM7UUFHSCxJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBDLE1BQU0sQ0FBQyxRQUFRLFdBQVcsR0FBRyxDQUFDO0lBQ2hDLENBQUM7QUFDSCxDQUFDO0FBRUQsMEJBQTBCLFdBQW1CO0lBQzNDLGlJQUFpSTtJQUNqSSxXQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2pDLHFDQUFxQztJQUNyQyxPQUFPLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztJQUMzQixPQUFPLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQztJQUNoQyxJQUFJLDBCQUEwQixHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7SUFDbkQsT0FBTyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7SUFDM0IsT0FBTyxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUM7SUFDaEMsRUFBRSxDQUFDLENBQUMsMEJBQTBCLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUNsRCxNQUFNLENBQUM7SUFDVCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzdCLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3ZELE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUIsSUFBSSxLQUFLLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUVoQyxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdHlsZUNhbGN1bGF0b3J9IGZyb20gJy4uL3N0eWxlX2NhbGN1bGF0b3InO1xuaW1wb3J0IHt0b0ludCwgZm9yRWFjaH0gZnJvbSAnLi4vdXRpbCc7XG5cbnZhciBjYW52YXMgPSA8SFRNTENhbnZhc0VsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycpO1xuY2FudmFzLndpZHRoID0gY2FudmFzLmhlaWdodCA9IDE7XG52YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG5leHBvcnQgY2xhc3MgQ29sb3JTdHlsZUNhbGN1bGF0b3IgaW1wbGVtZW50cyBTdHlsZUNhbGN1bGF0b3Ige1xuICBwcml2YXRlIF9zdGFydFZhbHVlOiBudW1iZXJbXTtcbiAgcHJpdmF0ZSBfZW5kVmFsdWU6IG51bWJlcltdO1xuICBwcml2YXRlIF9yYW5nZURpZmY6IG51bWJlcltdO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBzZXRLZXlmcmFtZVJhbmdlKHN0YXJ0VmFsdWU6IHN0cmluZywgZW5kVmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSBwYXJzZUNvbG9yU3RyaW5nKHN0YXJ0VmFsdWUpO1xuICAgIHRoaXMuX2VuZFZhbHVlID0gcGFyc2VDb2xvclN0cmluZyhlbmRWYWx1ZSk7XG4gICAgdGhpcy5fcmFuZ2VEaWZmID0gW107XG4gICAgdGhpcy5fcmFuZ2VEaWZmWzBdID0gdGhpcy5fZW5kVmFsdWVbMF0gLSB0aGlzLl9zdGFydFZhbHVlWzBdO1xuICAgIHRoaXMuX3JhbmdlRGlmZlsxXSA9IHRoaXMuX2VuZFZhbHVlWzFdIC0gdGhpcy5fc3RhcnRWYWx1ZVsxXTtcbiAgICB0aGlzLl9yYW5nZURpZmZbMl0gPSB0aGlzLl9lbmRWYWx1ZVsyXSAtIHRoaXMuX3N0YXJ0VmFsdWVbMl07XG4gICAgdGhpcy5fcmFuZ2VEaWZmWzNdID0gdGhpcy5fZW5kVmFsdWVbM10gLSB0aGlzLl9zdGFydFZhbHVlWzNdO1xuICB9XG5cbiAgY2FsY3VsYXRlKHBlcmNlbnRhZ2U6IG51bWJlcik6IHN0cmluZyB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIHZhciBhbHBoYVZhbCA9IHRoaXMuX3JhbmdlRGlmZlszXSAqIHBlcmNlbnRhZ2UgKyB0aGlzLl9zdGFydFZhbHVlWzNdO1xuXG4gICAgZm9yRWFjaCh0aGlzLl9yYW5nZURpZmYsICh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgIHZhciBjdXJyZW50VmFsdWUgPSB2YWx1ZSAqIHBlcmNlbnRhZ2UgKyB0aGlzLl9zdGFydFZhbHVlW2luZGV4XTtcbiAgICAgIGlmIChpbmRleCA8IDMpIHtcbiAgICAgICAgaWYoYWxwaGFWYWwgIT09IDEgJiYgY3VycmVudFZhbHVlID4gMCkge1xuICAgICAgICAgIGN1cnJlbnRWYWx1ZSAvPSBhbHBoYVZhbDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50VmFsdWUgPSBNYXRoLnJvdW5kKGN1cnJlbnRWYWx1ZSk7XG4gICAgICB9XG4gICAgICB2YWx1ZXMucHVzaChjdXJyZW50VmFsdWUpO1xuICAgIH0pO1xuXG5cbiAgICBsZXQgdmFsdWVTdHJpbmcgPSB2YWx1ZXMuam9pbignLCAnKTtcblxuICAgIHJldHVybiBgcmdiYSgke3ZhbHVlU3RyaW5nfSlgO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ29sb3JTdHJpbmcoY29sb3JTdHJpbmc6IHN0cmluZyk6IG51bWJlcltdIHtcbiAgLy8gU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vd2ViLWFuaW1hdGlvbnMvd2ViLWFuaW1hdGlvbnMtanMvYmxvYi9iNWQ5MTQxM2FjZWU4MmFhZGQwMWExODg4MGNiODRhNWQ4ODMwNDdkL3NyYy9jb2xvci1oYW5kbGVyLmpzXG4gIGNvbG9yU3RyaW5nID0gY29sb3JTdHJpbmcudHJpbSgpO1xuICAvLyBUaGUgY29udGV4dCBpZ25vcmVzIGludmFsaWQgY29sb3JzXG4gIGNvbnRleHQuZmlsbFN0eWxlID0gJyMwMDAnO1xuICBjb250ZXh0LmZpbGxTdHlsZSA9IGNvbG9yU3RyaW5nO1xuICB2YXIgY29udGV4dFNlcmlhbGl6ZWRGaWxsU3R5bGUgPSBjb250ZXh0LmZpbGxTdHlsZTtcbiAgY29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZic7XG4gIGNvbnRleHQuZmlsbFN0eWxlID0gY29sb3JTdHJpbmc7XG4gIGlmIChjb250ZXh0U2VyaWFsaXplZEZpbGxTdHlsZSAhPSBjb250ZXh0LmZpbGxTdHlsZSlcbiAgICByZXR1cm47XG4gIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgMSwgMSk7XG4gIHZhciBwaXhlbENvbG9yID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgMSwgMSkuZGF0YTtcbiAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgMSwgMSk7XG4gIHZhciBhbHBoYSA9IHBpeGVsQ29sb3JbM10gLyAyNTU7XG5cbiAgcmV0dXJuIFtwaXhlbENvbG9yWzBdICogYWxwaGEsIHBpeGVsQ29sb3JbMV0gKiBhbHBoYSwgcGl4ZWxDb2xvclsyXSAqIGFscGhhLCBhbHBoYV07XG59XG5cbiJdfQ==