import { DIMENSIONAL_PROPERTIES } from './dimensional_properties';
import { NUMERICAL_PROPERTIES } from './numerical_properties';
import { COLOR_PROPERTIES } from './color_properties';
import { forEach, toInt, isPresent } from './util';
import { DimensionalStyleCalculator } from './calculators/dimensional_style_calculator';
import { NumericalStyleCalculator } from './calculators/numerical_style_calculator';
import { TransformStyleCalculator } from './calculators/transform_style_calculator';
import { ColorStyleCalculator } from './calculators/color_style_calculator';
import { resolveEasingEquation } from './easing';
export class AnimationPropertyEntry {
    constructor(property, calculator) {
        this.property = property;
        this.calculator = calculator;
    }
}
export class PlayerOptions {
    constructor({ duration, delay, easing, fill }) {
        this.duration = toInt(duration);
        this.delay = isPresent(delay) ? toInt(delay) : 0;
        this.easing = isPresent(easing) ? easing : 'linear';
        switch (fill) {
            case 'forwards':
            case 'backwards':
            case 'both':
                this.fill = fill;
                break;
            default:
                this.fill = 'none';
                break;
        }
    }
}
function createCalculator(prop, values) {
    var calc;
    if (DIMENSIONAL_PROPERTIES.indexOf(prop) >= 0) {
        calc = new DimensionalStyleCalculator();
    }
    else if (NUMERICAL_PROPERTIES.indexOf(prop) >= 0) {
        calc = new NumericalStyleCalculator();
    }
    else if (prop == 'transform') {
        calc = new TransformStyleCalculator();
    }
    else if (COLOR_PROPERTIES.indexOf(prop) >= 0) {
        calc = new ColorStyleCalculator();
    }
    else {
        throw new Error('Only dimensional properties can be animated now');
    }
    calc.setKeyframeRange(values[0], values[1]);
    return calc;
}
export class Player {
    constructor(_element, keyframes, _options, _clock, _styles) {
        this._element = _element;
        this._options = _options;
        this._clock = _clock;
        this._styles = _styles;
        this._currentTime = 0;
        this._startingTimestamp = 0;
        this.onfinish = () => { };
        var properties = {};
        var firstKeyframe = keyframes[0];
        forEach(firstKeyframe, (value, prop) => {
            properties[prop] = [value];
        });
        var secondKeyframe = keyframes[1];
        forEach(secondKeyframe, (value, prop) => {
            properties[prop].push(value);
        });
        this._animators = [];
        forEach(properties, (values, prop) => {
            var calculator = createCalculator(prop, values);
            this._animators.push(new AnimationPropertyEntry(prop, calculator));
        });
        this._easingEquation = resolveEasingEquation(_options.easing);
    }
    get totalTime() {
        return this._options.duration;
    }
    get currentTime() {
        return this._currentTime;
    }
    play() {
        if (this.playing)
            return;
        this._initialValues = {};
        this._animators.forEach(entry => {
            var prop = entry.property;
            this._initialValues[prop] = this._styles.readStyle(this._element, prop);
        });
        this.playing = true;
        this._startingTimestamp = this._clock.now();
        this.tick();
    }
    _onfinish() {
        var fill = this._options.fill;
        if (fill == 'none' || fill == 'backwards') {
            this._cleanup();
        }
        this.onfinish();
    }
    _oncancel() {
        this._cleanup();
    }
    _ease(percentage) {
        return this._easingEquation(percentage);
    }
    _computeProperties(currentTime) {
        var results = [];
        var totalTime = this.totalTime;
        var percentage = Math.min(currentTime / totalTime, 1);
        var percentageWithEasing = this._ease(percentage);
        this._animators.forEach(entry => {
            var calculator = entry.calculator;
            results.push([entry.property, calculator.calculate(percentageWithEasing)]);
        });
        return results;
    }
    tick() {
        var currentTime = this._clock.currentTime - this._startingTimestamp;
        this._computeProperties(currentTime).forEach(entry => this._apply(entry[0], entry[1]));
        if (this._currentTime >= this.totalTime) {
            this._onfinish();
        }
        else {
            this._clock.raf(() => this.tick());
        }
        this._currentTime = currentTime;
    }
    _cleanup() {
        this._animators.forEach(entry => {
            var property = entry.property;
            this._apply(property, this._initialValues[property]);
        });
        this._initialValues = null;
    }
    _apply(prop, value) {
        this._element.style[prop] = value;
    }
}
//# sourceMappingURL=data:application/json;base64,