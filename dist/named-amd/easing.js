enifed('easing', ['exports', 'exceptions', 'util'], function (exports, _exceptions, _util) {
    'use strict';

    exports.resolveEasingEquation = resolveEasingEquation;
    exports.computePercentageFromEasing = computePercentageFromEasing;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var Coordinate = function Coordinate(x, y) {
        _classCallCheck(this, Coordinate);

        this.x = x;
        this.y = y;
    };

    exports.Coordinate = Coordinate;
    var LINEAR = [0, 0, 1, 1];
    exports.LINEAR = LINEAR;
    var EASE = [.25, .1, .25, 1];
    exports.EASE = EASE;
    var EASE_IN = [0.42, 0, 1, 1];
    exports.EASE_IN = EASE_IN;
    var EASE_OUT = [0, 0, 0.58, 1];
    exports.EASE_OUT = EASE_OUT;
    var EASE_IN_OUT = [0.42, 0, .58, 1];
    exports.EASE_IN_OUT = EASE_IN_OUT;
    var EPSILON = 1.0e-7;
    var EASING_REGEX = /cubic-bezier\(\s*([-\.\d]+)\s*,\s*([-\.\d]+)\s*,\s*([-\.\d]+)\s*,\s*([-\.\d]+)\s*\)/i;

    function resolveEasingEquation(name) {
        var coefficients;
        switch (name.toLowerCase()) {
            case 'linear':
                coefficients = LINEAR;
                break;
            case 'ease':
                coefficients = EASE;
                break;
            case 'ease-out':
                coefficients = EASE_OUT;
                break;
            case 'ease-in':
                coefficients = EASE_IN;
                break;
            case 'ease-in-out':
                coefficients = EASE_IN_OUT;
                break;
            default:
                var matches = name.match(EASING_REGEX);
                if (!matches) {
                    throw new _exceptions.BaseException('Invalid easing value provided');
                }
                coefficients = [_util.toFloat(matches[1]), _util.toFloat(matches[2]), _util.toFloat(matches[3]), _util.toFloat(matches[4])];
                break;
        }
        var curve = new Bezier(coefficients);
        return curve.solve.bind(curve);
    }

    // Mostly inspired by
    // https://code.google.com/p/chromium/codesearch#chromium/src/ui/gfx/geometry/cubic_bezier.cc

    var Bezier = (function () {
        function Bezier(_ref) {
            var p1x = _ref[0];
            var p1y = _ref[1];
            var p2x = _ref[2];
            var p2y = _ref[3];

            _classCallCheck(this, Bezier);

            this.cx_ = 3.0 * p1x;
            this.bx_ = 3.0 * (p2x - p1x) - this.cx_;
            this.ax_ = 1.0 - this.cx_ - this.bx_;
            this.cy_ = 3.0 * p1y;
            this.by_ = 3.0 * (p2y - p1y) - this.cy_;
            this.ay_ = 1.0 - this.cy_ - this.by_;
        }

        Bezier.prototype.x = function x(t) {
            return ((this.ax_ * t + this.bx_) * t + this.cx_) * t;
        };

        Bezier.prototype.y = function y(t) {
            return ((this.ay_ * t + this.by_) * t + this.cy_) * t;
        };

        Bezier.prototype.xprime = function xprime(t) {
            return (3.0 * this.ax_ * t + 2.0 * this.bx_) * t + this.cx_;
        };

        Bezier.prototype.yprime = function yprime(t) {
            return (3.0 * this.ay_ * t + 2.0 * this.by_) * t + this.cy_;
        };

        Bezier.prototype.solveTgivenX = function solveTgivenX(percentage) {
            // add assert(0 <= percentage && percentage <= 1);
            var t = percentage;
            var x, d;
            // First try a few iterations of Newton's method -- normally very fast.
            for (var i = 0; i < 8; i++) {
                x = this.x(t) - percentage;
                if (Math.abs(x) < EPSILON) return t;
                d = this.xprime(t);
                if (Math.abs(d) < EPSILON) break;
                t = t - x / d;
            }
            // Fallback to bisection.
            var t0 = 0.0;
            var t1 = 1.0;
            var t = percentage;
            while (t0 < t1) {
                x = this.x(t);
                if (Math.abs(x - percentage) < EPSILON) return t;
                if (percentage > x) t0 = t;else t1 = t;
                t = (t1 - t0) * .5 + t0;
            }
            return t;
        };

        Bezier.prototype.solve = function solve(percentage) {
            return this.y(this.solveTgivenX(percentage));
        };

        return Bezier;
    })();

    function computePercentageFromEasing(percentage, easing) {
        return new Bezier(easing).solve(percentage);
    }
});
//# sourceMappingURL=data:application/json;base64,